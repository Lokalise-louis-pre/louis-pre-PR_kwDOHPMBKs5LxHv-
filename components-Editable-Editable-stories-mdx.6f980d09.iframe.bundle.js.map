{"version":3,"file":"components-Editable-Editable-stories-mdx.6f980d09.iframe.bundle.js","mappings":";AAqDA;AACA;;AAGA;AAyHA;AACA;;AAGA;;;;;;;;;ACtKA;;;;;;;;;AAUA;;;;;;;;;AAUA;;;;;;;;;AAgBA","sources":["webpack://@lokalise/louis/./src/components/Editable/Editable.stories.mdx","webpack://@lokalise/louis/./src/components/Popover/styles.ts"],"sourcesContent":["\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport { assertIsFn, AddContext } from \"@storybook/addon-docs\";\n\nimport { Meta, Story, Canvas, ArgsTable } from '@storybook/addon-docs';\nimport { useArgs } from '@storybook/client-api';\nimport { styled } from '@lokalise/styled';\nimport { fontFamily, typography } from '../../utils/theme';\nimport { Editable } from './Editable';\nexport const Template = args => {\n  const {\n    onChange,\n    ...rest\n  } = args;\n  const [_, updateArgs] = useArgs();\n  const handleChange = newValue => {\n    updateArgs({\n      value: newValue\n    });\n  };\n  return <Editable onChange={handleChange} {...rest} mdxType=\"Editable\" />;\n};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n      console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n      return <div {...props}/>\n    };\nconst StoryContent = makeShortcode(\"StoryContent\");\nconst layoutProps = {\n  Template\n};\nconst MDXLayout = \"wrapper\"\nfunction MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <Meta title=\"Components/Editable\" component={Editable} parameters={{\n      controls: {\n        sort: 'requiredFirst'\n      },\n      docs: {\n        source: {\n          excludeDecorators: true\n        }\n      }\n    }} decorators={[Story => {\n      const StoryContent = styled.div`\n\t\t\t\tfont-family: ${fontFamily('default')};\n\t\t\t\t${typography('body')};\n\t\t\t\tpadding: 115px 0 0 80px;\n\t\t\t`;\n      return <StoryContent mdxType=\"StoryContent\">{Story()}</StoryContent>;\n    }]} mdxType=\"Meta\" />\n    <h1 {...{\n      \"id\": \"editable\"\n    }}>{`Editable`}</h1>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#overview\"\n        }}>{`Overview`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#figma-design-file\"\n        }}>{`Figma Design File`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#props\"\n        }}>{`Props`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#examples\"\n        }}>{`Examples`}</a></li>\n    </ul>\n    <h2 id=\"overview\">Overview</h2>\n    <p>{`Editable is used for editing inline text by clicking on the text.`}</p>\n    <h3 {...{\n      \"id\": \"installation\"\n    }}>{`Installation`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`npm install @lokalise/louis\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"usage\"\n    }}>{`Usage`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`import { useState } from 'react';\nimport { Editable } from '@lokalise/louis';\n\nexport default () => {\n    const [value, setValue] = useState();\n    return <Editable value={value} onChange={setValue} />;\n};\n`}</code></pre>\n    <h2 id=\"figma-design-file\">Figma Design File</h2>\n    <ul>\n      <li parentName=\"ul\">{`Figma Source File | Editable (not yet available in Figma, will be updated)`}</li>\n    </ul>\n    <h2 id=\"props\">Props</h2>\n    <ArgsTable of={Editable} sort=\"requiredFirst\" mdxType=\"ArgsTable\" />\n    <h2 id=\"examples\">Examples</h2>\n    <h3 {...{\n      \"id\": \"default\"\n    }}>{`Default`}</h3>\n    <Canvas withSource=\"open\" mdxType=\"Canvas\">\n\t<Story name=\"Default\" args={{\n        value: 'Editable text'\n      }} mdxType=\"Story\">\n\t\t{Template.bind({})}\n\t</Story>\n    </Canvas>\n    <h3 {...{\n      \"id\": \"empty-text\"\n    }}>{`Empty Text`}</h3>\n    <Canvas withSource=\"open\" mdxType=\"Canvas\">\n\t<Story name=\"Empty Text\" args={{\n        value: '',\n        emptyText: 'This Editable has an empty string as the value',\n        placeholder: 'Enter text'\n      }} mdxType=\"Story\">\n\t\t{Template.bind({})}\n\t</Story>\n    </Canvas>\n    <h3 {...{\n      \"id\": \"disabled\"\n    }}>{`Disabled`}</h3>\n    <Canvas withSource=\"open\" mdxType=\"Canvas\">\n\t<Story name=\"Disabled\" args={{\n        value: 'Disabled editable text',\n        disabled: true\n      }} mdxType=\"Story\">\n\t\t{Template.bind({})}\n\t</Story>\n    </Canvas>\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n\nexport const defaultStory = Template.bind({});\ndefaultStory.storyName = 'Default';\ndefaultStory.args = {\n  value: 'Editable text'\n};\ndefaultStory.parameters = { storySource: { source: 'args => {\\n  const {\\n    onChange,\\n    ...rest\\n  } = args;\\n  const [_, updateArgs] = useArgs();\\n  const handleChange = newValue => {\\n    updateArgs({\\n      value: newValue\\n    });\\n  };\\n  return <Editable onChange={handleChange} {...rest} />;\\n}' } };\n\nexport const emptyText = Template.bind({});\nemptyText.storyName = 'Empty Text';\nemptyText.args = {\n  value: '',\n  emptyText: 'This Editable has an empty string as the value',\n  placeholder: 'Enter text'\n};\nemptyText.parameters = { storySource: { source: 'args => {\\n  const {\\n    onChange,\\n    ...rest\\n  } = args;\\n  const [_, updateArgs] = useArgs();\\n  const handleChange = newValue => {\\n    updateArgs({\\n      value: newValue\\n    });\\n  };\\n  return <Editable onChange={handleChange} {...rest} />;\\n}' } };\n\nexport const disabled = Template.bind({});\ndisabled.storyName = 'Disabled';\ndisabled.args = {\n  value: 'Disabled editable text',\n  disabled: true\n};\ndisabled.parameters = { storySource: { source: 'args => {\\n  const {\\n    onChange,\\n    ...rest\\n  } = args;\\n  const [_, updateArgs] = useArgs();\\n  const handleChange = newValue => {\\n    updateArgs({\\n      value: newValue\\n    });\\n  };\\n  return <Editable onChange={handleChange} {...rest} />;\\n}' } };\n\nconst componentMeta = { title: 'Components/Editable', parameters: {\n  controls: {\n    sort: 'requiredFirst'\n  },\n  docs: {\n    source: {\n      excludeDecorators: true\n    }\n  }\n}, decorators: [Story => {\n  const StoryContent = styled.div`\n\t\t\t\tfont-family: ${fontFamily('default')};\n\t\t\t\t${typography('body')};\n\t\t\t\tpadding: 115px 0 0 80px;\n\t\t\t`;\n  return <StoryContent>{Story()}</StoryContent>;\n}], component: Editable, includeStories: [\"defaultStory\",\"emptyText\",\"disabled\"],  };\n\nconst mdxStoryNameToKey = {\"Default\":\"defaultStory\",\"Empty Text\":\"emptyText\",\"Disabled\":\"disabled\"};\n\ncomponentMeta.parameters = componentMeta.parameters || {};\ncomponentMeta.parameters.docs = {\n  ...(componentMeta.parameters.docs || {}),\n  page: () => <AddContext mdxStoryNameToKey={mdxStoryNameToKey} mdxComponentAnnotations={componentMeta}><MDXContent /></AddContext>,\n};\n\nexport default componentMeta;","import type { Placement } from '@floating-ui/react';\nimport { css, styled, variants } from '@lokalise/styled';\nimport type { HTMLAttributes, RefAttributes } from 'react';\n\nimport { color, fontFamily, radius, typography, zIndex } from '../../utils/theme';\n\nconst bottom = css`\n\ttop: -5px;\n\n\t&::before {\n\t\tborder-left-width: 1px;\n\t\tborder-left-style: solid;\n\t\tborder-top-width: 1px;\n\t\tborder-top-style: solid;\n\t}\n`;\nconst top = css`\n\tbottom: -5px;\n\n\t&::before {\n\t\tborder-right-width: 1px;\n\t\tborder-right-style: solid;\n\t\tborder-bottom-width: 1px;\n\t\tborder-bottom-style: solid;\n\t}\n`;\nconst left = css`\n\tright: -5px;\n\n\t&::before {\n\t\tborder-right-width: 1px;\n\t\tborder-right-style: solid;\n\t\tborder-top-width: 1px;\n\t\tborder-top-style: solid;\n\t}\n`;\nconst right = css`\n\tleft: -5px;\n\n\t&::before {\n\t\tborder-left-width: 1px;\n\t\tborder-left-style: solid;\n\t\tborder-bottom-width: 1px;\n\t\tborder-bottom-style: solid;\n\t}\n`;\n\nexport type ArrowProps = {\n\tplacement?: Placement;\n} & HTMLAttributes<HTMLElement> &\n\tRefAttributes<HTMLElement>;\n\nexport const Arrow = styled.div<ArrowProps>`\n\tposition: absolute;\n\twidth: 8px;\n\theight: 8px;\n\tz-index: ${zIndex('hide')};\n\n\t&::before {\n\t\tposition: absolute;\n\t\twidth: 8px;\n\t\theight: 8px;\n\t\tz-index: ${zIndex('hide')};\n\t\tcontent: '';\n\t\tdisplay: block;\n\t\ttransform: rotate(45deg);\n\t\tbackground-color: ${color('background.primary')};\n\t\tborder-color: ${color('border.primary')};\n\t}\n\n\t${variants(\n\t\t'placement',\n\t\t{\n\t\t\ttop,\n\t\t\tbottom,\n\t\t\tleft,\n\t\t\tright,\n\t\t\t'right-end': right,\n\t\t\t'right-start': right,\n\t\t\t'left-start': left,\n\t\t\t'auto-end': css``,\n\t\t\t'auto-start': css``,\n\t\t\tauto: css``,\n\t\t\t'bottom-end': bottom,\n\t\t\t'bottom-start': bottom,\n\t\t\t'left-end': left,\n\t\t\t'top-end': top,\n\t\t\t'top-start': top,\n\t\t},\n\t\t'auto',\n\t)}\n`;\n\nexport const Content = styled.div<HTMLAttributes<HTMLElement>>`\n\tpadding: 0;\n\tborder-radius: ${radius('md')};\n\tbackground-color: ${color('background.primary')};\n\tborder: 1px solid ${color('border.primary')};\n\tbox-shadow: 0 0 5px rgba(0, 0, 0, 0.2);\n\tz-index: ${zIndex('popover')};\n\tcolor: ${color('content.primary')};\n\tfont-family: ${fontFamily('default')};\n\t${typography('description')};\n\twidth: max-content;\n`;\n"],"names":[],"sourceRoot":""}