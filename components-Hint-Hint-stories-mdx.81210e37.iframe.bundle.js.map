{"version":3,"file":"components-Hint-Hint-stories-mdx.81210e37.iframe.bundle.js","mappings":";;;;;AAcA;ACgGA;AACA;AAEA;AA2BA;AACA;AAEA;AClIA;AAKA;AAMA;AACA;AACA;;;;;;;;;ACVA;;;;;;;;;AAUA;;;;;;;;;AAUA;;;;;;;;;AAgBA","sources":["webpack://@lokalise/louis/./src/components/Hint/styles.ts","webpack://@lokalise/louis/./src/components/Hint/Hint.stories.mdx","webpack://@lokalise/louis/./src/components/Label/styles.tsx","webpack://@lokalise/louis/./src/components/Popover/styles.ts"],"sourcesContent":["import { css, excludeProps, styled } from '@lokalise/styled';\n\nimport { color, radius, spacing, zIndex } from '../../utils/theme';\nimport { PopoverArrow as BaseArrow, PopoverContent as BaseContent } from '../Popover';\n\nconst side = '14px';\n\nconst centerPosition = css`\n\tposition: absolute; // Set as \"absolute\" so svg is not affecting line height.\n\ttop: 50%;\n\tleft: 50%;\n\ttransform: translate(-50%, -50%);\n`;\n\nexport const HintButton = styled.span`\n\tcursor: pointer;\n\tdisplay: inline-block;\n\tvertical-align: baseline;\n\twidth: ${side};\n\tmin-height: ${side};\n\tborder-radius: 50%;\n\tposition: relative; // Necessary so \"icon\" can be positioned in the center\n\tline-height: inherit;\n\n\t&::before {\n\t\tcontent: '\\\\a0'; // This space is necessary to hold line-height, which is necessary so Hint is visually aligned with the text\n\t}\n`;\n\nexport const IconWrapper = styled.span`\n\tdisplay: inline-flex;\n\tfill: ${color('interactive.content.idle')};\n\tfont-size: 16px;\n\t${centerPosition}\n`;\n\nexport const Content = styled(BaseContent).withConfig({\n\tshouldForwardProp: excludeProps(['width']),\n})<{ width: string }>`\n\tfont-size: 14px;\n\tline-height: 20px;\n\tbackground-color: ${color('background.primary')};\n\tcolor: ${color('content.secondary')};\n\tborder-radius: ${radius('md')};\n\tpadding: ${spacing(3, 4)};\n\tborder-color: ${color('border.primary')};\n\tz-index: ${zIndex('tooltip')};\n\twidth: ${({ width }) => width};\n`;\n\nexport const Arrow = styled(BaseArrow)`\n\t&:before {\n\t\tbackground-color: ${color('background.primary')};\n\t\tborder-color: ${color('border.primary')};\n\t}\n`;\n","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport { assertIsFn, AddContext } from \"@storybook/addon-docs\";\n\nimport { Meta, Story, Canvas, ArgsTable } from '@storybook/addon-docs';\nimport { styled } from '@lokalise/styled';\nimport { fontFamily, typography } from '../../utils/theme';\nimport { Input } from '../Input';\nimport { Label } from '../Label';\nimport { Hint } from './Hint';\nexport const Template = args => <Hint {...args} mdxType=\"Hint\" />;\nexport const LabelTemplate = args => <Label text={<>\n\t\t\t\tLabels sometimes include hints <Hint {...args} mdxType=\"Hint\" />\n\t\t\t</>} mdxType=\"Label\">\n\t\t<Input mdxType=\"Input\" />\n\t</Label>;\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n      console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n      return <div {...props}/>\n    };\nconst StoryContent = makeShortcode(\"StoryContent\");\nconst layoutProps = {\n  Template,\nLabelTemplate\n};\nconst MDXLayout = \"wrapper\"\nfunction MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n\n    <Meta title=\"Components/Hint\" component={Hint} parameters={{\n      controls: {\n        sort: 'requiredFirst'\n      },\n      docs: {\n        source: {\n          excludeDecorators: true\n        }\n      }\n    }} argTypes={{\n      width: {\n        control: {\n          type: 'text'\n        }\n      }\n    }} mdxType=\"Meta\" />\n    <h1 {...{\n      \"id\": \"hint\"\n    }}>{`Hint`}</h1>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#overview\"\n        }}>{`Overview`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#figma-design-file\"\n        }}>{`Figma Design File`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#props\"\n        }}>{`Props`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#examples\"\n        }}>{`Examples`}</a></li>\n    </ul>\n    <h2 {...{\n      \"id\": \"overview\"\n    }}>{`Overview`}</h2>\n    <p>{`Hint can be used as an icon button to provide additional context and explanations for other UI elements or text.`}</p>\n    <h3 {...{\n      \"id\": \"installation\"\n    }}>{`Installation`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`npm install @lokalise/louis\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"usage\"\n    }}>{`Usage`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`import { Hint } from '@lokalise/louis';\n\nexport default () => <Hint>This is a hint.</Hint>;\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"figma-design-file\"\n    }}>{`Figma Design File`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`Figma Source File | Hint (not yet available in Figma, will be updated)`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"props\"\n    }}>{`Props`}</h2>\n    <ArgsTable of={Hint} sort=\"requiredFirst\" mdxType=\"ArgsTable\" />\n    <h2 {...{\n      \"id\": \"examples\"\n    }}>{`Examples`}</h2>\n    <Canvas withSource=\"open\" mdxType=\"Canvas\">\n\t<Story name=\"Hint\" args={{\n        children: 'This is a hint.'\n      }} decorators={[Story => {\n        const StoryContent = styled.div`\n\t\t\t\t\tfont-family: ${fontFamily('default')};\n\t\t\t\t\t${typography('body')};\n\t\t\t\t`;\n        return <StoryContent mdxType=\"StoryContent\">\n\t\t\t\t\t\t<>This could use an explanation {Story()} with some extra context.</>\n\t\t\t\t\t</StoryContent>;\n      }]} mdxType=\"Story\">\n\t\t{Template.bind({})}\n\t</Story>\n    </Canvas>\n    <Canvas withSource=\"open\" mdxType=\"Canvas\">\n\t<Story name=\"Inside label\" args={{\n        children: 'This is a hint.'\n      }} mdxType=\"Story\">\n\t\t{LabelTemplate.bind({})}\n\t</Story>\n    </Canvas>\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n\nexport const hint = Template.bind({});\nhint.storyName = 'Hint';\nhint.args = {\n  children: 'This is a hint.'\n};\nhint.parameters = { storySource: { source: 'args => <Hint {...args} />' } };\nhint.decorators = [Story => {\n  const StoryContent = styled.div`\n\t\t\t\t\tfont-family: ${fontFamily('default')};\n\t\t\t\t\t${typography('body')};\n\t\t\t\t`;\n  return <StoryContent>\n\t\t\t\t\t\t<>This could use an explanation {Story()} with some extra context.</>\n\t\t\t\t\t</StoryContent>;\n}];\n\nexport const insideLabel = LabelTemplate.bind({});\ninsideLabel.storyName = 'Inside label';\ninsideLabel.args = {\n  children: 'This is a hint.'\n};\ninsideLabel.parameters = { storySource: { source: 'args => <Label text={<>\\n\t\t\t\tLabels sometimes include hints <Hint {...args} />\\n\t\t\t</>}>\\n\t\t<Input />\\n\t</Label>' } };\n\nconst componentMeta = { title: 'Components/Hint', parameters: {\n  controls: {\n    sort: 'requiredFirst'\n  },\n  docs: {\n    source: {\n      excludeDecorators: true\n    }\n  }\n}, component: Hint, argTypes: {\n  width: {\n    control: {\n      type: 'text'\n    }\n  }\n}, includeStories: [\"hint\",\"insideLabel\"],  };\n\nconst mdxStoryNameToKey = {\"Hint\":\"hint\",\"Inside label\":\"insideLabel\"};\n\ncomponentMeta.parameters = componentMeta.parameters || {};\ncomponentMeta.parameters.docs = {\n  ...(componentMeta.parameters.docs || {}),\n  page: () => <AddContext mdxStoryNameToKey={mdxStoryNameToKey} mdxComponentAnnotations={componentMeta}><MDXContent /></AddContext>,\n};\n\nexport default componentMeta;","import { css, modifier, styled } from '@lokalise/styled';\n\nimport { color, fontFamily, spacing, typography } from '../../utils/theme';\n\nexport const Container = styled.label<{ underline: boolean }>`\n\twidth: 100%;\n\tmargin-bottom: 0;\n\tdisplay: grid;\n\tgap: ${spacing(1)};\n\n\t${modifier(\n\t\t'underline',\n\t\tcss`\n\t\t\tgap: ${spacing(3)};\n\t\t`,\n\t)}\n`;\n\nexport const LabelText = styled.span<{ underline: boolean }>`\n\tfont-family: ${fontFamily('default')};\n\t${typography('descriptionMedium')}\n\t${modifier(\n\t\t'underline',\n\t\tcss`\n\t\t\tpadding-bottom: ${spacing(1)};\n\t\t\tborder-bottom: 1px solid ${color('border.secondary')};\n\t\t`,\n\t)}\n    \n    color: ${color('content.primary')};\n\tcursor: default;\n`;\n\nexport const AsteriskIcon = styled.span`\n\tcolor: ${color('red.500')};\n\t&:after {\n\t\tcontent: '*';\n\t}\n`;\n","import type { Placement } from '@floating-ui/react';\nimport { css, styled, variants } from '@lokalise/styled';\nimport type { HTMLAttributes, RefAttributes } from 'react';\n\nimport { color, fontFamily, radius, typography, zIndex } from '../../utils/theme';\n\nconst bottom = css`\n\ttop: -5px;\n\n\t&::before {\n\t\tborder-left-width: 1px;\n\t\tborder-left-style: solid;\n\t\tborder-top-width: 1px;\n\t\tborder-top-style: solid;\n\t}\n`;\nconst top = css`\n\tbottom: -5px;\n\n\t&::before {\n\t\tborder-right-width: 1px;\n\t\tborder-right-style: solid;\n\t\tborder-bottom-width: 1px;\n\t\tborder-bottom-style: solid;\n\t}\n`;\nconst left = css`\n\tright: -5px;\n\n\t&::before {\n\t\tborder-right-width: 1px;\n\t\tborder-right-style: solid;\n\t\tborder-top-width: 1px;\n\t\tborder-top-style: solid;\n\t}\n`;\nconst right = css`\n\tleft: -5px;\n\n\t&::before {\n\t\tborder-left-width: 1px;\n\t\tborder-left-style: solid;\n\t\tborder-bottom-width: 1px;\n\t\tborder-bottom-style: solid;\n\t}\n`;\n\nexport type ArrowProps = {\n\tplacement?: Placement;\n} & HTMLAttributes<HTMLElement> &\n\tRefAttributes<HTMLElement>;\n\nexport const Arrow = styled.div<ArrowProps>`\n\tposition: absolute;\n\twidth: 8px;\n\theight: 8px;\n\tz-index: ${zIndex('hide')};\n\n\t&::before {\n\t\tposition: absolute;\n\t\twidth: 8px;\n\t\theight: 8px;\n\t\tz-index: ${zIndex('hide')};\n\t\tcontent: '';\n\t\tdisplay: block;\n\t\ttransform: rotate(45deg);\n\t\tbackground-color: ${color('background.primary')};\n\t\tborder-color: ${color('border.primary')};\n\t}\n\n\t${variants(\n\t\t'placement',\n\t\t{\n\t\t\ttop,\n\t\t\tbottom,\n\t\t\tleft,\n\t\t\tright,\n\t\t\t'right-end': right,\n\t\t\t'right-start': right,\n\t\t\t'left-start': left,\n\t\t\t'auto-end': css``,\n\t\t\t'auto-start': css``,\n\t\t\tauto: css``,\n\t\t\t'bottom-end': bottom,\n\t\t\t'bottom-start': bottom,\n\t\t\t'left-end': left,\n\t\t\t'top-end': top,\n\t\t\t'top-start': top,\n\t\t},\n\t\t'auto',\n\t)}\n`;\n\nexport const Content = styled.div<HTMLAttributes<HTMLElement>>`\n\tpadding: 0;\n\tborder-radius: ${radius('md')};\n\tbackground-color: ${color('background.primary')};\n\tborder: 1px solid ${color('border.primary')};\n\tbox-shadow: 0 0 5px rgba(0, 0, 0, 0.2);\n\tz-index: ${zIndex('popover')};\n\tcolor: ${color('content.primary')};\n\tfont-family: ${fontFamily('default')};\n\t${typography('description')};\n\twidth: max-content;\n`;\n"],"names":[],"sourceRoot":""}